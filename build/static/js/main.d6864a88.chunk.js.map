{"version":3,"sources":["components/AnswersList.jsx","components/Answer.jsx","components/Chats.jsx","assets/imgs/no-profile.png","assets/imgs/torahack.png","components/Chat.jsx","components/Forms/FormDialog.jsx","components/Forms/TextInput.jsx","firebase/config.js","firebase/index.js","App.jsx","reportWebVitals.js","index.js"],"names":["AnswersList","props","className","answers","map","value","index","content","nextId","select","toString","useStyles","makeStyles","createStyles","borderColor","color","fontWeight","marginBottom","backgroundColor","Answer","classes","Button","variant","button","onClick","height","padding","overflow","Chats","List","chats","id","chat","text","type","Chat","isQuestion","ListItem","ListItemAvatar","Avatar","alt","src","Torahack","NoProfile","FormDialog","useState","description","setDescription","email","setEmail","name","setName","inputDescription","useCallback","event","target","inputEmail","inputName","Dialog","open","onClose","handleClose","DialogTitle","DialogContent","label","multiline","rows","onChange","DialogActions","isBlank","i","length","validateRequiredInput","isValidEmail","test","validateEmailFormat","alert","payload","fetch","method","body","JSON","stringify","then","TextInput","TextField","fullWidth","margin","maltiline","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","db","firestore","App","setAnswers","setChats","currentId","setCurrentId","dataset","setDataset","setOpen","displayNextQuestion","nextQuestionId","nextDataset","addChats","question","handleClickOpen","prevChats","useEffect","scrollArea","document","getElementById","scrollTop","scrollHeight","a","initDataset","collection","get","snapshots","forEach","doc","data","selectedAnswer","createElement","href","click","setTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yPAaeA,EAVK,SAACC,GACjB,OACI,qBAAKC,UAAU,iBAAf,SACKD,EAAME,QAAQC,KAAI,SAACC,EAAOC,GACvB,OAAO,cAAC,EAAD,CAAQC,QAASF,EAAME,QAASC,OAAQH,EAAMG,OAA+BC,OAAQR,EAAMQ,QAAhCH,EAAMI,kB,2BCHlFC,EAAYC,aAAY,kBAC1BC,YAAa,CACT,OAAU,CACVC,YAAa,UACbC,MAAO,UACPC,WAAY,IACZC,aAAa,MACb,UAAU,CACVC,gBAAgB,UAChBH,MAAM,cAsBCI,EAfA,SAAClB,GACZ,IAAMmB,EAAUT,IAEhB,OACI,cAACU,EAAA,EAAD,CACAC,QAAQ,WACRpB,UAAWkB,EAAQG,OACnBC,QAAS,kBAAMvB,EAAMQ,OAAOR,EAAMM,QAASN,EAAMO,SAHjD,SAKKP,EAAMM,W,SCxBbI,EAAYC,aAAW,kBACzBC,YAAa,CACT,MAAQ,CACJY,OAAO,QACPC,QAAQ,IACRC,SAAS,aAiBNC,EAXD,SAAC3B,GACX,IAAMmB,EAAUT,IAChB,OACI,cAACkB,EAAA,EAAD,CAAM3B,UAAWkB,EAAQU,MAAOC,GAAI,cAApC,SACK9B,EAAM6B,MAAM1B,KAAI,SAAC4B,EAAM1B,GACpB,OAAO,cAAC,EAAD,CAAM2B,KAAMD,EAAKC,KAAMC,KAAMF,EAAKE,MAAW5B,EAAMI,kB,2BCrB3D,MAA0B,uCCA1B,MAA0B,qCC4B1ByB,EArBF,SAAClC,GACV,IAAMmC,EAA6B,aAAfnC,EAAMiC,KACpBd,EAAUgB,EAAa,cAAgB,kBAE7C,OACQ,eAACC,EAAA,EAAD,CAAUnC,UAAWkB,EAArB,UACI,cAACkB,EAAA,EAAD,UAGKF,EACG,cAACG,EAAA,EAAD,CAAQC,IAAI,OAAOC,IAAKC,IAExB,cAACH,EAAA,EAAD,CAAQC,IAAI,OAAOC,IAAKE,MAIhC,qBAAKzC,UAAU,iBAAf,SAAiCD,EAAMgC,W,oCCmFxCW,EAlGI,SAAC3C,GAAW,IAAD,EACY4C,mBAAS,IADrB,mBACnBC,EADmB,KACNC,EADM,OAEAF,mBAAS,IAFT,mBAEnBG,EAFmB,KAEZC,EAFY,OAGFJ,mBAAS,IAHP,mBAGnBK,EAHmB,KAGbC,EAHa,KAMpBC,EAAmBC,uBAAY,SAACC,GAClCP,EAAeO,EAAMC,OAAOlD,SAC9B,CAAC0C,IAEGS,EAAaH,uBAAY,SAACC,GAC5BL,EAASK,EAAMC,OAAOlD,SACxB,CAAC4C,IAEGQ,EAAYJ,uBAAY,SAACC,GAC3BH,EAAQG,EAAMC,OAAOlD,SACvB,CAAC8C,IAoDH,OACI,eAACO,EAAA,EAAD,CAAQC,KAAM1D,EAAM0D,KAAMC,QAAS3D,EAAM4D,YAAzC,UACI,cAACC,EAAA,EAAD,2EACA,eAACC,EAAA,EAAD,WACI,cAAC,EAAD,CACIC,MAAO,6BAAUC,WAAW,EAAOC,KAAM,EACzC7D,MAAO6C,EAAMhB,KAAM,OAAQiC,SAAUV,IAEzC,cAAC,EAAD,CACIO,MAAO,2DAAeC,WAAW,EAAOC,KAAM,EAC9C7D,MAAO2C,EAAOd,KAAM,QAASiC,SAAUX,IAE3C,cAAC,EAAD,CACIQ,MAAO,iEAAgBC,WAAW,EAAMC,KAAM,EAC9C7D,MAAOyC,EAAaZ,KAAM,OAAQiC,SAAUf,OAGpD,eAACgB,EAAA,EAAD,WACI,cAAC/C,EAAA,EAAD,CAAQG,QAASvB,EAAM4D,YAAa9C,MAAM,UAA1C,4CAGA,cAACM,EAAA,EAAD,CAAQG,QAvDD,WACf,IAAM6C,EAZoB,WAE1B,IADA,IAAIA,GAAU,EACLC,EAAI,EAAGA,EAAI,UAAKC,OAAQD,EAAGA,EAAE,EAAG,EACrB,MAAPA,EAAL,qBAAKA,OAAL,YAAKA,MACLD,GAAU,GAGlB,OAAOA,EAKSG,CAAsBtB,EAAMF,EAAOF,GAC7C2B,EAlBkB,SAACzB,GAEzB,MADc,wEACD0B,KAAK1B,GAgBG2B,CAAoB3B,GAEzC,GAAIqB,EAEA,OADAO,MAAM,uEACC,EACJ,IAAKH,EAER,OADAG,MAAM,2GACC,EAEP,IAAMC,EAAU,CACZ5C,KAAM,iGACUiB,EADV,iDAEcF,EAFd,6DAGgBF,GAM1BgC,MAHW,oFAGA,CACPC,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,KACtBM,MAAK,WAKJ,OAJAP,MAAM,8IACN7B,EAAe,IACfE,EAAS,IACTE,EAAQ,IACDlD,EAAM4D,kBA0BgB9C,MAAM,UAAnC,6C,SC/EDqE,EAfG,SAACnF,GACf,OACI,cAACoF,EAAA,EAAD,CACIC,WAAW,EACXtB,MAAO/D,EAAM+D,MACbuB,OAAQ,QACRC,UAAWvF,EAAMgE,UACjBC,KAAMjE,EAAMiE,KACZ7D,MAAOJ,EAAMI,MACb6B,KAAMjC,EAAMiC,KACZiC,SAAUlE,EAAMkE,Y,QCFbsB,G,MAVQ,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBCJnBC,IAASC,cAAcT,GAChB,IAAMU,EAAKF,IAASG,YC+FZC,EA9FH,WAAO,IAAD,EACgBxD,mBAAS,IADzB,mBACP1C,EADO,KACEmG,EADF,OAEYzD,mBAAS,IAFrB,mBAEPf,EAFO,KAEAyE,EAFA,OAGoB1D,mBAAS,QAH7B,mBAGP2D,EAHO,KAGIC,EAHJ,OAIgB5D,mBAAS,IAJzB,mBAIP6D,EAJO,KAIEC,EAJF,OAKU9D,oBAAS,GALnB,mBAKPc,EALO,KAKDiD,EALC,KAQRC,EAAsB,SAACC,EAAgBC,GACzCC,EAAS,CACL/E,KAAK8E,EAAYE,SACjB/E,KAAM,aAGVoE,EAAWS,EAAY5G,SACvBsG,EAAaK,IA4BXI,EAAkB,WACpBN,GAAQ,IAGN/C,EAAeR,uBAAY,WAC7BuD,GAAQ,KACV,CAACA,IAEGI,EAAW,SAAChF,GACduE,GAAS,SAAAY,GACL,MAAM,GAAN,mBAAWA,GAAX,CAAsBnF,QA6B9B,OAzBAoF,qBAAU,WACN,IAAMC,EAAaC,SAASC,eAAe,eACvCF,IACAA,EAAWG,UAAYH,EAAWI,iBAI1CL,qBAAW,WACP,sBAAC,4BAAAM,EAAA,6DACSC,EAAc,GADvB,SAGSxB,EAAGyB,WAAW,aAAaC,MAAM1C,MAAK,SAAA2C,GACxCA,EAAUC,SAAQ,SAAAC,GACd,IAAMjG,EAAKiG,EAAIjG,GACTkG,EAAOD,EAAIC,OACjBN,EAAY5F,GAAMkG,QAP7B,OAWGtB,EAAWgB,GACXd,EAAoBL,EAAWmB,EAAYnB,IAZ9C,0CAAD,KAcF,IAIM,yBAAStG,UAAW,YAApB,SACI,sBAAKA,UAAW,QAAhB,UACI,cAAC,EAAD,CAAO4B,MAAOA,IACd,cAAC,EAAD,CAAa3B,QAASA,EAASM,OAnE1B,SAACyH,EAAgBpB,GAClC,QAAQ,GAEJ,IAAM,WAAWpC,KAAKoC,GAClB,IAAMY,EAAIJ,SAASa,cAAc,KACjCT,EAAEU,KAAOtB,EACTY,EAAEnE,OAAS,SACXmE,EAAEW,QACF,MAEJ,IAAyB,YAAnBvB,EACFI,IACA,MAEJ,QACIF,EAAS,CACL/E,KAAMiG,EACNhG,KAAM,WAGVoG,YAAW,kBAAMzB,EAAoBC,EAAeJ,EAAQI,MAAkB,SAgD1E,cAAC,EAAD,CAAYnD,KAAMA,EAAME,YAAaA,UCjF1C0E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtD,MAAK,YAAkD,IAA/CuD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1BgB,M","file":"static/js/main.d6864a88.chunk.js","sourcesContent":["import React from 'react';\nimport {Answer} from './index'\n\nconst AnswersList = (props) => {\n    return(\n        <div　className=\"c-grid__answer\">\n            {props.answers.map((value,　index) => {\n                return <Answer content={value.content} nextId={value.nextId} key={index.toString()} select={props.select} />\n            })}\n        </div>\n    )\n}\n\nexport default AnswersList","import React from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles( ( ) => (\n    createStyles({\n        \"button\": {\n        borderColor: '#FFB549',\n        color: '#FFB549',\n        fontWeight: 600,\n        marginBottom:'8px',\n        \"&:hover\":{\n        backgroundColor:'#FFB549',\n        color:'#fff',\n        }\n        }\n    })\n\n));\n\nconst Answer = (props) =>{\n    const classes = useStyles();\n\n    return(\n        <Button\n        variant=\"outlined\"\n        className={classes.button}\n        onClick={() => props.select(props.content, props.nextId)}\n        >\n            {props.content}\n        </Button>\n        \n    )\n}\n\nexport default Answer","import React from 'react';\nimport {Chat} from './index'\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\n\nconst useStyles = makeStyles(()=> (\n    createStyles({\n        \"chats\":{\n            height:'400px',\n            padding:'0',\n            overflow:'auto',\n        }\n    })\n))\n\n\nconst Chats = (props) => {\n    const classes = useStyles()\n    return(\n        <List className={classes.chats} id={\"scroll-area\"}>\n            {props.chats.map((chat, index)  => {\n                return <Chat text={chat.text} type={chat.type} key={index.toString()}/>\n            })}\n        </List>\n    )\n}\n\nexport default Chats","export default __webpack_public_path__ + \"static/media/no-profile.67b6df19.png\";","export default __webpack_public_path__ + \"static/media/torahack.762c7e70.png\";","import React from 'react';\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport NoProfile from '../assets/imgs/no-profile.png'\nimport Torahack from '../assets/imgs/torahack.png'\n\nconst Chat = (props) => {\n    const isQuestion = (props.type === 'question');\n    const classes = isQuestion ? 'p-chat__row' : 'p-chat__reverse';\n\n    return(\n            <ListItem className={classes}>\n                <ListItemAvatar>\n                    {/*isQuestionが真ならtorahackの写真が使われる*/}\n\n                    {isQuestion ?(\n                        <Avatar alt=\"icon\" src={Torahack} />\n                    ): (\n                        <Avatar alt=\"icon\" src={NoProfile} />\n                    )}\n\n                </ListItemAvatar>\n                <div className=\"p-chat__bubble\">{props.text}</div>\n            </ListItem>\n    )\n}\n\nexport default Chat","import React, {useState, useCallback, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {TextInput} from \"./index\";\n\nconst FormDialog = (props) => {\n    const [description, setDescription] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [name, setName] = useState(\"\");\n\n    // Functions triggered by inputting text value\n    const inputDescription = useCallback((event) => {\n        setDescription(event.target.value)\n    },[setDescription]);\n\n    const inputEmail = useCallback((event) => {\n        setEmail(event.target.value)\n    },[setEmail]);\n\n    const inputName = useCallback((event) => {\n        setName(event.target.value)\n    },[setName]);\n\n    const validateEmailFormat = (email) => {\n        const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n        return regex.test(email)\n    }\n\n    const validateRequiredInput = (...args) => {\n        let isBlank = false;\n        for (let i = 0; i < args.length; i=(i+1)|0) {\n            if (args[i] === \"\") {\n                isBlank = true;\n            }\n        }\n        return isBlank\n    };\n\n    // Slackに問い合わせがあったことを通知する\n    const submitForm = () => {\n        const isBlank = validateRequiredInput(name, email, description)\n        const isValidEmail = validateEmailFormat(email)\n\n        if (isBlank) {\n            alert('必須入力欄が空白です。')\n            return false\n        } else if (!isValidEmail) {\n            alert('メールアドレスの書式が異なります。')\n            return false\n        } else {\n            const payload = {\n                text: 'お問い合わせがありました\\n'\n                    + 'お名前: ' + name + '\\n'\n                    + 'メールアドレス: ' + email + '\\n'\n                    + '【問い合わせ内容】\\n' + description\n            };\n\n            const url ='https://hooks.slack.com/services/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'\n\n            // fetchメソッドでフォームの内容をSlackのIncoming Webhook URL に送信する\n            fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(payload)\n            }).then(() => {\n                alert('送信が完了しました。追ってご連絡いたします🙌');\n                setDescription(\"\")\n                setEmail(\"\")\n                setName(\"\")\n                return props.handleClose()\n            })\n        }\n    };\n\n    return (\n        <Dialog open={props.open} onClose={props.handleClose}>\n            <DialogTitle>お問い合わせフォーム</DialogTitle>\n            <DialogContent>\n                <TextInput\n                    label={\"名前(必須)\"} multiline={false} rows={1}\n                    value={name} type={\"text\"} onChange={inputName}\n                />\n                <TextInput\n                    label={\"メールアドレス(必須)\"} multiline={false} rows={1}\n                    value={email} type={\"email\"} onChange={inputEmail}\n                />\n                <TextInput\n                    label={\"お問い合わせ内容(必須)\"} multiline={true} rows={5}\n                    value={description} type={\"text\"} onChange={inputDescription}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.handleClose} color=\"primary\">\n                    キャンセル\n                </Button>\n                <Button onClick={submitForm} color=\"primary\">\n                    送信する\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n\n}\n\nexport default FormDialog","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst TextInput = (props) => {\n    return (\n        <TextField\n            fullWidth={true}\n            label={props.label}\n            margin={\"dense\"}\n            maltiline={props.multiline}\n            rows={props.rows}\n            value={props.value}\n            type={props.type}\n            onChange={props.onChange}\n        />\n    )\n}\n\nexport default TextInput","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCNFP51uEcGKpXWGr7LqkJdtBb8kFdGt_c\",\n    authDomain: \"chatbot-4cb1e.firebaseapp.com\",\n    projectId: \"chatbot-4cb1e\",\n    storageBucket: \"chatbot-4cb1e.appspot.com\",\n    messagingSenderId: \"23392090074\",\n    appId: \"1:23392090074:web:07209180fc4d6d0726b2e3\",\n    measurementId: \"G-LFFSN9P2RN\"\n};\n\nexport default firebaseConfig","import firebase from \"firebase\";\nimport 'firebase/firestore'\nimport firebaseConfig from \"./config\";\n\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.firestore();","import React, {useCallback, useState, useEffect} from 'react';\nimport './assets/styles/style.css';\nimport {AnswersList, Chats} from \"./components\";\nimport {FormDialog} from \"./components/Forms/index\";\nimport {db} from './firebase/index'\n\nconst App = () => {\n    const [answers, setAnswers] = useState([]);\n    const [chats, setChats] = useState([]);\n    const [currentId, setCurrentId] = useState(\"init\");\n    const [dataset, setDataset] = useState({});\n    const [open, setOpen] = useState(false);\n\n\n    const displayNextQuestion = (nextQuestionId, nextDataset) => {\n        addChats({\n            text:nextDataset.question,\n            type: 'question'\n        })\n\n        setAnswers(nextDataset.answers)\n        setCurrentId(nextQuestionId)\n\n    }\n\n    const selectAnswer = (selectedAnswer, nextQuestionId) => {\n        switch (true){\n\n            case (/^https:*/.test(nextQuestionId)):\n                const a = document.createElement('a');\n                a.href = nextQuestionId;\n                a.target = '_blank';\n                a.click();\n                break;\n\n            case (nextQuestionId === 'contact'):\n                handleClickOpen();\n                break;\n\n            default:\n                addChats({\n                    text: selectedAnswer,\n                    type: 'answer'\n                })\n\n                setTimeout(() => displayNextQuestion(nextQuestionId,dataset[nextQuestionId]), 500);\n                break;\n        }\n    }\n    const handleClickOpen = () => {\n        setOpen(true)\n    };\n\n    const handleClose =  useCallback(() =>  {\n        setOpen(false)\n    },[setOpen]);\n\n    const addChats = (chat) => {\n        setChats(prevChats => {\n            return [...prevChats, chat]\n        })\n    }\n\n    useEffect(() => {\n        const scrollArea = document.getElementById('scroll-area');\n        if (scrollArea){\n            scrollArea.scrollTop = scrollArea.scrollHeight;\n        }\n    })\n\n    useEffect( () => {\n        (async () => {\n            const initDataset = {};\n\n            await db.collection(\"questions\").get().then(snapshots => {\n                snapshots.forEach(doc => {\n                    const id = doc.id\n                    const data = doc.data()\n                    initDataset[id] = data\n                })\n            })\n\n            setDataset(initDataset)\n            displayNextQuestion(currentId, initDataset[currentId])\n        })()\n    },[]);\n\n\n    return (\n            <section className={\"c-section\"}>\n                <div className={\"c-box\"}>\n                    <Chats chats={chats}/>\n                    <AnswersList answers={answers} select={selectAnswer}/>\n                    <FormDialog open={open} handleClose={handleClose}/>\n                </div>\n            </section>\n        );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}