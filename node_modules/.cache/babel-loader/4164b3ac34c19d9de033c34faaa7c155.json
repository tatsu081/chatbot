{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuyafujii/project/chatbot/src/components/Forms/FormDialog.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { TextInput } from \"./index\";\nimport { WEBHOOK_URL } from '../../webhookConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormDialog = props => {\n  _s();\n\n  const [description, setDescription] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\"); // Functions triggered by inputting text value\n\n  const inputDescription = useCallback(event => {\n    setDescription(event.target.value);\n  }, [setDescription]);\n  const inputEmail = useCallback(event => {\n    setEmail(event.target.value);\n  }, [setEmail]);\n  const inputName = useCallback(event => {\n    setName(event.target.value);\n  }, [setName]);\n\n  const validateEmailFormat = email => {\n    const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    return regex.test(email);\n  };\n\n  const validateRequiredInput = (...args) => {\n    let isBlank = false;\n\n    for (let i = 0; i < args.length; i = i + 1 | 0) {\n      if (args[i] === \"\") {\n        isBlank = true;\n      }\n    }\n\n    return isBlank;\n  }; // Slackに問い合わせがあったことを通知する\n\n\n  const submitForm = () => {\n    const isBlank = validateRequiredInput(name, email, description);\n    const isValidEmail = validateEmailFormat(email);\n\n    if (isBlank) {\n      alert('必須入力欄が空白です。');\n      return false;\n    } else if (!isValidEmail) {\n      alert('メールアドレスの書式が異なります。');\n      return false;\n    } else {\n      const payload = {\n        text: 'お問い合わせがありました\\n' + 'お名前: ' + name + '\\n' + 'メールアドレス: ' + email + '\\n' + '【問い合わせ内容】\\n' + description\n      };\n      const url = 'https://hooks.slack.com/services/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'; // fetchメソッドでフォームの内容をSlackのIncoming Webhook URL に送信する\n\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(payload)\n      }).then(() => {\n        alert('送信が完了しました。追ってご連絡いたします🙌');\n        setDescription(\"\");\n        setEmail(\"\");\n        setName(\"\");\n        return props.handleClose();\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: props.open,\n    onClose: props.handleClose,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"\\u304A\\u554F\\u3044\\u5408\\u308F\\u305B\\u30D5\\u30A9\\u30FC\\u30E0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        label: \"名前(必須)\",\n        multiline: false,\n        rows: 1,\n        value: name,\n        type: \"text\",\n        onChange: inputName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        label: \"メールアドレス(必須)\",\n        multiline: false,\n        rows: 1,\n        value: email,\n        type: \"email\",\n        onChange: inputEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        label: \"お問い合わせ内容(必須)\",\n        multiline: true,\n        rows: 5,\n        value: description,\n        type: \"text\",\n        onChange: inputDescription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: props.handleClose,\n        color: \"primary\",\n        children: \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: submitForm,\n        color: \"primary\",\n        children: \"\\u9001\\u4FE1\\u3059\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormDialog, \"eIAF8t0PEHJe3haqL16oVSlHgmI=\");\n\n_c = FormDialog;\nexport default FormDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormDialog\");","map":{"version":3,"sources":["/Users/tatsuyafujii/project/chatbot/src/components/Forms/FormDialog.jsx"],"names":["React","useState","useCallback","useEffect","Button","Dialog","DialogActions","DialogContent","DialogTitle","TextInput","WEBHOOK_URL","FormDialog","props","description","setDescription","email","setEmail","name","setName","inputDescription","event","target","value","inputEmail","inputName","validateEmailFormat","regex","test","validateRequiredInput","args","isBlank","i","length","submitForm","isValidEmail","alert","payload","text","url","fetch","method","body","JSON","stringify","then","handleClose","open"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {TextInput} from \"./index\";\nimport {WEBHOOK_URL} from '../../webhookConfig'\n\nconst FormDialog = (props) => {\n    const [description, setDescription] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [name, setName] = useState(\"\");\n\n    // Functions triggered by inputting text value\n    const inputDescription = useCallback((event) => {\n        setDescription(event.target.value)\n    },[setDescription]);\n\n    const inputEmail = useCallback((event) => {\n        setEmail(event.target.value)\n    },[setEmail]);\n\n    const inputName = useCallback((event) => {\n        setName(event.target.value)\n    },[setName]);\n\n    const validateEmailFormat = (email) => {\n        const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n        return regex.test(email)\n    }\n\n    const validateRequiredInput = (...args) => {\n        let isBlank = false;\n        for (let i = 0; i < args.length; i=(i+1)|0) {\n            if (args[i] === \"\") {\n                isBlank = true;\n            }\n        }\n        return isBlank\n    };\n\n    // Slackに問い合わせがあったことを通知する\n    const submitForm = () => {\n        const isBlank = validateRequiredInput(name, email, description)\n        const isValidEmail = validateEmailFormat(email)\n\n        if (isBlank) {\n            alert('必須入力欄が空白です。')\n            return false\n        } else if (!isValidEmail) {\n            alert('メールアドレスの書式が異なります。')\n            return false\n        } else {\n            const payload = {\n                text: 'お問い合わせがありました\\n'\n                    + 'お名前: ' + name + '\\n'\n                    + 'メールアドレス: ' + email + '\\n'\n                    + '【問い合わせ内容】\\n' + description\n            };\n\n            const url ='https://hooks.slack.com/services/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'\n\n            // fetchメソッドでフォームの内容をSlackのIncoming Webhook URL に送信する\n            fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(payload)\n            }).then(() => {\n                alert('送信が完了しました。追ってご連絡いたします🙌');\n                setDescription(\"\")\n                setEmail(\"\")\n                setName(\"\")\n                return props.handleClose()\n            })\n        }\n    };\n\n    return (\n        <Dialog open={props.open} onClose={props.handleClose}>\n            <DialogTitle>お問い合わせフォーム</DialogTitle>\n            <DialogContent>\n                <TextInput\n                    label={\"名前(必須)\"} multiline={false} rows={1}\n                    value={name} type={\"text\"} onChange={inputName}\n                />\n                <TextInput\n                    label={\"メールアドレス(必須)\"} multiline={false} rows={1}\n                    value={email} type={\"email\"} onChange={inputEmail}\n                />\n                <TextInput\n                    label={\"お問い合わせ内容(必須)\"} multiline={true} rows={5}\n                    value={description} type={\"text\"} onChange={inputDescription}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.handleClose} color=\"primary\">\n                    キャンセル\n                </Button>\n                <Button onClick={submitForm} color=\"primary\">\n                    送信する\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n\n}\n\nexport default FormDialog"]},"metadata":{},"sourceType":"module"}