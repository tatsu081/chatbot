{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuyafujii/project/chatbot/src/components/Forms/FormDialog.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextInput from \"./TextInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormDialog = () => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const inputName = useCallback(event => {\n    return {\n      name: event.target.value\n    };\n  }, [setName]);\n  const inputEmail = useCallback(event => {\n    return {\n      email: event.target.value\n    };\n  }, [setEmail]);\n  const inputDescription = useCallback(event => {\n    return {\n      description: event.target.value\n    };\n  }, [setDescription]);\n\n  const submitForm = () => {\n    const payload = {\n      text: 'お問い合わせがありました\\n' + 'お名前:' + name + '\\n' + 'Email:' + email + '\\n' + '問い合わせ内容:\\n' + description\n    };\n    const url = 'https://hooks.slack.com/services/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';\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    }).then(() => {\n      alert('送信が完了しました。迫ってご連絡します');\n      this.setState({\n        name: \"\",\n        email: \"\",\n        description: \"\"\n      });\n      return handleClose;\n    });\n  }; // const validateEmailFormat = (email) => {\n  //     const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n  //     return regex.test(email)\n  // }\n  //\n  // const validateRequiredInput = (...args) => {\n  //     let isBlank = false;\n  //     for (let i = 0; i < args.length; i=(i+1)|0) {\n  //         if (args[i] === \"\") {\n  //             isBlank = true;\n  //         }\n  //     }\n  //     return isBlank\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"alert-dialog-title\",\n      children: \"\\u304A\\u554F\\u3044\\u5408\\u308F\\u305B\\u30D5\\u30A9\\u30FC\\u30E0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n        id: \"alert-dialog-description\",\n        children: [/*#__PURE__*/_jsxDEV(TextInput, {\n          label: \"お名前(必須)\",\n          multiline: false,\n          rows: 1,\n          value: name,\n          type: \"text\",\n          onChange: inputName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          label: \"メールアドレス(必須)\",\n          multiline: false,\n          rows: 1,\n          value: email,\n          type: \"email\",\n          onChange: inputEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          label: \"お問い合わせ内容(必須)\",\n          multiline: true,\n          rows: 5,\n          value: description,\n          type: \"text\",\n          onChange: inputDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClose,\n        color: \"primary\",\n        children: \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: submitForm,\n        color: \"primary\",\n        autoFocus: true,\n        children: \"\\u9001\\u4FE1\\u3059\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 13\n  }, this);\n};\n\n_s(FormDialog, \"u17zzbdt6XUk1SIAPCVojQopDMA=\");\n\n_c = FormDialog;\nexport default FormDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormDialog\");","map":{"version":3,"sources":["/Users/tatsuyafujii/project/chatbot/src/components/Forms/FormDialog.jsx"],"names":["React","useCallback","useState","useEffect","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TextInput","FormDialog","name","setName","email","setEmail","description","setDescription","inputName","event","target","value","inputEmail","inputDescription","submitForm","payload","text","url","fetch","method","body","JSON","stringify","then","alert","setState","handleClose","open"],"mappings":"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","sourcesContent":["import React,{useCallback, useState, useEffect} from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextInput from \"./TextInput\";\n\nconst FormDialog = () =>{\n    const[name, setName] = useState(\"\")\n    const[email, setEmail] = useState(\"\")\n    const[description, setDescription] = useState(\"\")\n\n    const inputName =  useCallback((event) => {\n        return ({name: event.target.value})\n    },[setName]);\n\n    const inputEmail =  useCallback((event) => {\n        return ({email: event.target.value})\n    },[setEmail]);\n\n\n    const inputDescription =  useCallback((event) => {\n        return ({description: event.target.value})\n    },[setDescription]);\n\n    const submitForm = () => {\n\n        const payload = {\n            text: 'お問い合わせがありました\\n'+\n                    'お名前:' + name + '\\n' +\n                    'Email:' + email + '\\n' +\n                    '問い合わせ内容:\\n' + description\n        }\n\n        const url ='https://hooks.slack.com/services/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'\n\n        fetch(url, {\n            method:'POST',\n            body:JSON.stringify(payload)\n        }).then(() => {\n            alert('送信が完了しました。迫ってご連絡します')\n            this.setState({\n                name: \"\",\n                email: \"\",\n                description:\"\"\n            })\n            return handleClose;\n        })\n    }\n\n\n// const validateEmailFormat = (email) => {\n    //     const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n    //     return regex.test(email)\n    // }\n    //\n    // const validateRequiredInput = (...args) => {\n    //     let isBlank = false;\n    //     for (let i = 0; i < args.length; i=(i+1)|0) {\n    //         if (args[i] === \"\") {\n    //             isBlank = true;\n    //         }\n    //     }\n    //     return isBlank\n    // };\n\n\n        return(\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">お問い合わせフォーム</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <TextInput\n                            label={\"お名前(必須)\"} multiline={false} rows={1}\n                            value={name} type={\"text\"} onChange={inputName}\n                        />\n                        <TextInput\n                            label={\"メールアドレス(必須)\"} multiline={false} rows={1}\n                            value={email} type={\"email\"} onChange={inputEmail}\n                        />\n                        <TextInput\n                            label={\"お問い合わせ内容(必須)\"} multiline={true} rows={5}\n                            value={description} type={\"text\"} onChange={inputDescription}\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        キャンセル\n                    </Button>\n                    <Button onClick={submitForm} color=\"primary\" autoFocus>\n                        送信する\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n}\n\nexport default FormDialog"]},"metadata":{},"sourceType":"module"}