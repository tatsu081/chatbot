{"ast":null,"code":"import _slicedToArray from\"/Users/tatsuyafujii/project/chatbot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useCallback,useEffect}from'react';import Button from'@material-ui/core/Button';import Dialog from'@material-ui/core/Dialog';import DialogActions from'@material-ui/core/DialogActions';import DialogContent from'@material-ui/core/DialogContent';import DialogTitle from'@material-ui/core/DialogTitle';import{TextInput}from\"./index\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var FormDialog=function FormDialog(props){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),description=_useState2[0],setDescription=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),email=_useState4[0],setEmail=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),name=_useState6[0],setName=_useState6[1];// Functions triggered by inputting text value\nvar inputDescription=useCallback(function(event){setDescription(event.target.value);},[setDescription]);var inputEmail=useCallback(function(event){setEmail(event.target.value);},[setEmail]);var inputName=useCallback(function(event){setName(event.target.value);},[setName]);var validateEmailFormat=function validateEmailFormat(email){var regex=/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;return regex.test(email);};var validateRequiredInput=function validateRequiredInput(){var isBlank=false;for(var i=0;i<arguments.length;i=i+1|0){if((i<0||arguments.length<=i?undefined:arguments[i])===\"\"){isBlank=true;}}return isBlank;};// Slackに問い合わせがあったことを通知する\nvar submitForm=function submitForm(){var isBlank=validateRequiredInput(name,email,description);var isValidEmail=validateEmailFormat(email);if(isBlank){alert('必須入力欄が空白です。');return false;}else if(!isValidEmail){alert('メールアドレスの書式が異なります。');return false;}else{var payload={text:'お問い合わせがありました\\n'+'お名前: '+name+'\\n'+'メールアドレス: '+email+'\\n'+'【問い合わせ内容】\\n'+description};var url='https://hooks.slack.com/services/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';// fetchメソッドでフォームの内容をSlackのIncoming Webhook URL に送信する\nfetch(url,{method:'POST',body:JSON.stringify(payload)}).then(function(){alert('送信が完了しました。追ってご連絡いたします🙌');setDescription(\"\");setEmail(\"\");setName(\"\");return props.handleClose();});}};return/*#__PURE__*/_jsxs(Dialog,{open:props.open,onClose:props.handleClose,children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"\\u304A\\u554F\\u3044\\u5408\\u308F\\u305B\\u30D5\\u30A9\\u30FC\\u30E0\"}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsx(TextInput,{label:\"名前(必須)\",multiline:false,rows:1,value:name,type:\"text\",onChange:inputName}),/*#__PURE__*/_jsx(TextInput,{label:\"メールアドレス(必須)\",multiline:false,rows:1,value:email,type:\"email\",onChange:inputEmail}),/*#__PURE__*/_jsx(TextInput,{label:\"お問い合わせ内容(必須)\",multiline:true,rows:5,value:description,type:\"text\",onChange:inputDescription})]}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:props.handleClose,color:\"primary\",children:\"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"}),/*#__PURE__*/_jsx(Button,{onClick:submitForm,color:\"primary\",children:\"\\u9001\\u4FE1\\u3059\\u308B\"})]})]});};export default FormDialog;","map":{"version":3,"sources":["/Users/tatsuyafujii/project/chatbot/src/components/Forms/FormDialog.jsx"],"names":["React","useState","useCallback","useEffect","Button","Dialog","DialogActions","DialogContent","DialogTitle","TextInput","FormDialog","props","description","setDescription","email","setEmail","name","setName","inputDescription","event","target","value","inputEmail","inputName","validateEmailFormat","regex","test","validateRequiredInput","isBlank","i","length","submitForm","isValidEmail","alert","payload","text","url","fetch","method","body","JSON","stringify","then","handleClose","open"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {TextInput} from \"./index\";\n\nconst FormDialog = (props) => {\n    const [description, setDescription] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [name, setName] = useState(\"\");\n\n    // Functions triggered by inputting text value\n    const inputDescription = useCallback((event) => {\n        setDescription(event.target.value)\n    },[setDescription]);\n\n    const inputEmail = useCallback((event) => {\n        setEmail(event.target.value)\n    },[setEmail]);\n\n    const inputName = useCallback((event) => {\n        setName(event.target.value)\n    },[setName]);\n\n    const validateEmailFormat = (email) => {\n        const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n        return regex.test(email)\n    }\n\n    const validateRequiredInput = (...args) => {\n        let isBlank = false;\n        for (let i = 0; i < args.length; i=(i+1)|0) {\n            if (args[i] === \"\") {\n                isBlank = true;\n            }\n        }\n        return isBlank\n    };\n\n    // Slackに問い合わせがあったことを通知する\n    const submitForm = () => {\n        const isBlank = validateRequiredInput(name, email, description)\n        const isValidEmail = validateEmailFormat(email)\n\n        if (isBlank) {\n            alert('必須入力欄が空白です。')\n            return false\n        } else if (!isValidEmail) {\n            alert('メールアドレスの書式が異なります。')\n            return false\n        } else {\n            const payload = {\n                text: 'お問い合わせがありました\\n'\n                    + 'お名前: ' + name + '\\n'\n                    + 'メールアドレス: ' + email + '\\n'\n                    + '【問い合わせ内容】\\n' + description\n            };\n\n            const url ='https://hooks.slack.com/services/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'\n\n            // fetchメソッドでフォームの内容をSlackのIncoming Webhook URL に送信する\n            fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(payload)\n            }).then(() => {\n                alert('送信が完了しました。追ってご連絡いたします🙌');\n                setDescription(\"\")\n                setEmail(\"\")\n                setName(\"\")\n                return props.handleClose()\n            })\n        }\n    };\n\n    return (\n        <Dialog open={props.open} onClose={props.handleClose}>\n            <DialogTitle>お問い合わせフォーム</DialogTitle>\n            <DialogContent>\n                <TextInput\n                    label={\"名前(必須)\"} multiline={false} rows={1}\n                    value={name} type={\"text\"} onChange={inputName}\n                />\n                <TextInput\n                    label={\"メールアドレス(必須)\"} multiline={false} rows={1}\n                    value={email} type={\"email\"} onChange={inputEmail}\n                />\n                <TextInput\n                    label={\"お問い合わせ内容(必須)\"} multiline={true} rows={5}\n                    value={description} type={\"text\"} onChange={inputDescription}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.handleClose} color=\"primary\">\n                    キャンセル\n                </Button>\n                <Button onClick={submitForm} color=\"primary\">\n                    送信する\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n\n}\n\nexport default FormDialog"]},"metadata":{},"sourceType":"module"}