{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuyafujii/project/chatbot/src/components/Forms/FormDialog.jsx\";\nimport React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextInput from \"./TextInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class FormDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.inputName = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.inputEmail = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.inputDescription = event => {\n      this.setState({\n        description: event.target.value\n      });\n    };\n\n    this.submitForm = () => {\n      const name = this.state.name;\n      const email = this.state.email;\n      const description = this.state.description;\n      const payload = {\n        text: 'お問い合わせがありました\\n' + 'お名前:' + name + '\\n' + 'Email:' + email + '\\n' + '問い合わせ内容:\\n' + description\n      };\n      const url = 'https://hooks.slack.com/services/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';\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(payload)\n      }).then(() => {\n        alert('送信が完了しました。迫ってご連絡します');\n        return this.setState({\n          name: \"\",\n          email: \"\",\n          description: \"\"\n        });\n        return this.props.handleClose();\n      });\n    };\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      description: \"\"\n    };\n    this.inputName = this.inputName.bind(this);\n    this.inputEmail = this.inputEmail.bind(this);\n    this.inputDescription = this.inputDescription.bind(this);\n  }\n\n  // const validateEmailFormat = (email) => {\n  //     const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n  //     return regex.test(email)\n  // }\n  //\n  // const validateRequiredInput = (...args) => {\n  //     let isBlank = false;\n  //     for (let i = 0; i < args.length; i=(i+1)|0) {\n  //         if (args[i] === \"\") {\n  //             isBlank = true;\n  //         }\n  //     }\n  //     return isBlank\n  // };\n  render() {\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: this.props.open,\n      onClose: this.props.handleClose,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"alert-dialog-title\",\n        children: \"\\u304A\\u554F\\u3044\\u5408\\u308F\\u305B\\u30D5\\u30A9\\u30FC\\u30E0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          id: \"alert-dialog-description\",\n          children: [/*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"お名前(必須)\",\n            multiline: false,\n            rows: 1,\n            value: this.state.name,\n            type: \"text\",\n            onChange: this.inputName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"メールアドレス(必須)\",\n            multiline: false,\n            rows: 1,\n            value: this.state.email,\n            type: \"email\",\n            onChange: this.inputEmail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            label: \"お問い合わせ内容(必須)\",\n            multiline: true,\n            rows: 5,\n            value: this.state.description,\n            type: \"text\",\n            onChange: this.inputDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.props.handleClose,\n          color: \"primary\",\n          children: \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.props.handleClose,\n          color: \"primary\",\n          autoFocus: true,\n          children: \"\\u9001\\u4FE1\\u3059\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/tatsuyafujii/project/chatbot/src/components/Forms/FormDialog.jsx"],"names":["React","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","TextInput","FormDialog","Component","constructor","props","inputName","event","setState","email","target","value","inputEmail","inputDescription","description","submitForm","name","state","payload","text","url","fetch","method","body","JSON","stringify","then","alert","handleClose","bind","render","open"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextInput from \"./TextInput\";\n\nexport default class FormDialog extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            name:\"\",\n            email:\"\",\n            description:\"\"\n        }\n        this.inputName = this.inputName.bind(this)\n        this.inputEmail = this.inputEmail.bind(this)\n        this.inputDescription = this.inputDescription.bind(this)\n    }\n\n    inputName = (event) => {\n        this.setState({email: event.target.value})\n    }\n\n    inputEmail = (event) => {\n        this.setState({email:event.target.value})\n    }\n\n    inputDescription = (event) => {\n        this.setState({description:event.target.value})\n    }\n\n    submitForm = () => {\n        const name = this.state.name\n        const email = this.state.email\n        const description = this.state.description\n\n        const payload = {\n            text: 'お問い合わせがありました\\n'+\n                    'お名前:' + name + '\\n' +\n                    'Email:' + email + '\\n' +\n                    '問い合わせ内容:\\n' + description\n        }\n\n        const url ='https://hooks.slack.com/services/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'\n\n        fetch(url, {\n            method:'POST',\n            body:JSON.stringify(payload)\n        }).then(() => {\n            alert('送信が完了しました。迫ってご連絡します')\n            return this.setState({\n                name: \"\",\n                email: \"\",\n                description:\"\"\n            })\n            return this.props.handleClose();\n        })\n    }\n\n    // const validateEmailFormat = (email) => {\n    //     const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n    //     return regex.test(email)\n    // }\n    //\n    // const validateRequiredInput = (...args) => {\n    //     let isBlank = false;\n    //     for (let i = 0; i < args.length; i=(i+1)|0) {\n    //         if (args[i] === \"\") {\n    //             isBlank = true;\n    //         }\n    //     }\n    //     return isBlank\n    // };\n\n\n    render() {\n        return(\n            <Dialog\n                open={this.props.open}\n                onClose={this.props.handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">お問い合わせフォーム</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <TextInput\n                            label={\"お名前(必須)\"} multiline={false} rows={1}\n                            value={this.state.name} type={\"text\"} onChange={this.inputName}\n                        />\n                        <TextInput\n                            label={\"メールアドレス(必須)\"} multiline={false} rows={1}\n                            value={this.state.email} type={\"email\"} onChange={this.inputEmail}\n                        />\n                        <TextInput\n                            label={\"お問い合わせ内容(必須)\"} multiline={true} rows={5}\n                            value={this.state.description} type={\"text\"} onChange={this.inputDescription}\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={this.props.handleClose} color=\"primary\">\n                        キャンセル\n                    </Button>\n                    <Button onClick={this.props.handleClose} color=\"primary\" autoFocus>\n                        送信する\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}