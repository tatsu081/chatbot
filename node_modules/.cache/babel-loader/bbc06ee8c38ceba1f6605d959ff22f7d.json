{"ast":null,"code":"var _jsxFileName = \"/Users/tatsuyafujii/project/chatbot/src/App.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useState, useEffect } from 'react';\nimport './assets/styles/style.css';\nimport { AnswersList, Chats } from \"./components\";\nimport FormDialog from \"./components/Forms/FormDialog\";\nimport { db } from './firebase/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [answers, setAnswers] = useState([]);\n  const [chats, setChats] = useState([]);\n  const [currentId, setCurrentId] = useState(\"init\");\n  const [dataset, setDataset] = useState({});\n  const [open, setOpen] = useState(false);\n\n  const displayNextQuestion = (nextQuestionId, nextDataset) => {\n    addChats({\n      text: nextDatase.question,\n      type: 'question'\n    });\n    setAnswers(nextDataset.answers);\n    setCurrentId(nextQuestionId);\n    this.setState({\n      answers: this.state.dataset[nextQuestionId].answers,\n      chats: chats,\n      currentId: nextQuestionId\n    });\n  };\n\n  const selectAnswer = (selectedAnswer, nextQuestionId) => {\n    switch (true) {\n      case /^https:*/.test(nextQuestionId):\n        const a = document.createElement('a');\n        a.href = nextQuestionId;\n        a.target = '_blank';\n        a.click();\n        break;\n\n      case nextQuestionId === 'contact':\n        handleClickOpen();\n        break;\n\n      default:\n        addChats({\n          text: selectedAnswer,\n          type: 'answer'\n        });\n        setTimeout(() => this.displayNextQuestion(nextQuestionId, dataset[nextQuestionId]), 500);\n        break;\n    }\n  };\n\n  const addChats = chat => {\n    _s();\n\n    setChats(prevChats => {\n      return [...prevChats, chat];\n    });\n    useEffect(() => {\n      const scrollArea = document.getElementById('scroll-area');\n\n      if (scrollArea) {\n        scrollArea.scrollTop = scrollArea.scrollHeight;\n      }\n    });\n    useEffect(() => {\n      (async () => {\n        const initDataset = {};\n        await db.collection(\"questions\").get().then(snapshots => {\n          snapshots.forEach(doc => {\n            const id = doc.id;\n            const data = doc.data();\n            initDataset[id] = data;\n          });\n        });\n        setDataset(initDataset);\n        displayNextQuestion(currendId, initDataset[currendId]);\n      })();\n    }, []);\n\n    const handleClickOpen = () => {\n      setOpen(true);\n    };\n\n    const handleClose = useCallback(() => {\n      setOpen(false);\n    }, [setOpen]);\n  };\n\n  _s(addChats, \"WR3Gjiml9sdXest9LQISSPwVyDg=\");\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"c-section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"c-box\",\n      children: [/*#__PURE__*/_jsxDEV(Chats, {\n        chats: chats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(AnswersList, {\n        answers: answers,\n        select: selectAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormDialog, {\n        open: open,\n        handleClose: handleClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 13\n  }, this);\n};\n\n_s2(App, \"5dciosREhx+Yrw+cjqNGPoStuAI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tatsuyafujii/project/chatbot/src/App.jsx"],"names":["React","useCallback","useState","useEffect","AnswersList","Chats","FormDialog","db","App","answers","setAnswers","chats","setChats","currentId","setCurrentId","dataset","setDataset","open","setOpen","displayNextQuestion","nextQuestionId","nextDataset","addChats","text","nextDatase","question","type","setState","state","selectAnswer","selectedAnswer","test","a","document","createElement","href","target","click","handleClickOpen","setTimeout","chat","prevChats","scrollArea","getElementById","scrollTop","scrollHeight","initDataset","collection","get","then","snapshots","forEach","doc","id","data","currendId","handleClose"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAsD,OAAtD;AACA,OAAO,2BAAP;AACA,SAAQC,WAAR,EAAqBC,KAArB,QAAiC,cAAjC;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,SAAQC,EAAR,QAAiB,kBAAjB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAAA;;AACd,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,MAAD,CAA1C;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,KAAD,CAAhC;;AAGA,QAAMiB,mBAAmB,GAAG,CAACC,cAAD,EAAiBC,WAAjB,KAAiC;AACzDC,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACC,UAAU,CAACC,QADX;AAELC,MAAAA,IAAI,EAAE;AAFD,KAAD,CAAR;AAKAhB,IAAAA,UAAU,CAACW,WAAW,CAACZ,OAAb,CAAV;AACAK,IAAAA,YAAY,CAACM,cAAD,CAAZ;AAEA,SAAKO,QAAL,CAAc;AACVlB,MAAAA,OAAO,EAAE,KAAKmB,KAAL,CAAWb,OAAX,CAAmBK,cAAnB,EAAmCX,OADlC;AAEVE,MAAAA,KAAK,EAAEA,KAFG;AAGVE,MAAAA,SAAS,EAACO;AAHA,KAAd;AAKH,GAdD;;AAgBA,QAAMS,YAAY,GAAG,CAACC,cAAD,EAAiBV,cAAjB,KAAoC;AACrD,YAAQ,IAAR;AAEI,WAAM,WAAWW,IAAX,CAAgBX,cAAhB,CAAN;AACI,cAAMY,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAV;AACAF,QAAAA,CAAC,CAACG,IAAF,GAASf,cAAT;AACAY,QAAAA,CAAC,CAACI,MAAF,GAAW,QAAX;AACAJ,QAAAA,CAAC,CAACK,KAAF;AACA;;AAEJ,WAAMjB,cAAc,KAAK,SAAzB;AACIkB,QAAAA,eAAe;AACf;;AAEJ;AACIhB,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEO,cADD;AAELJ,UAAAA,IAAI,EAAE;AAFD,SAAD,CAAR;AAKAa,QAAAA,UAAU,CAAC,MAAM,KAAKpB,mBAAL,CAAyBC,cAAzB,EAAwCL,OAAO,CAACK,cAAD,CAA/C,CAAP,EAAyE,GAAzE,CAAV;AACA;AApBR;AAsBH,GAvBD;;AAyBA,QAAME,QAAQ,GAAIkB,IAAD,IAAU;AAAA;;AAC3B5B,IAAAA,QAAQ,CAAC6B,SAAS,IAAI;AAClB,aAAO,CAAC,GAAGA,SAAJ,EAAeD,IAAf,CAAP;AACH,KAFO,CAAR;AAIArC,IAAAA,SAAS,CAAC,MAAM;AACZ,YAAMuC,UAAU,GAAGT,QAAQ,CAACU,cAAT,CAAwB,aAAxB,CAAnB;;AACA,UAAID,UAAJ,EAAe;AACXA,QAAAA,UAAU,CAACE,SAAX,GAAuBF,UAAU,CAACG,YAAlC;AACH;AACJ,KALQ,CAAT;AAOA1C,IAAAA,SAAS,CAAE,MAAM;AACb,OAAC,YAAY;AACT,cAAM2C,WAAW,GAAG,EAApB;AAEA,cAAMvC,EAAE,CAACwC,UAAH,CAAc,WAAd,EAA2BC,GAA3B,GAAiCC,IAAjC,CAAsCC,SAAS,IAAI;AACrDA,UAAAA,SAAS,CAACC,OAAV,CAAkBC,GAAG,IAAI;AACrB,kBAAMC,EAAE,GAAGD,GAAG,CAACC,EAAf;AACA,kBAAMC,IAAI,GAAGF,GAAG,CAACE,IAAJ,EAAb;AACAR,YAAAA,WAAW,CAACO,EAAD,CAAX,GAAkBC,IAAlB;AACH,WAJD;AAKH,SANK,CAAN;AAQAtC,QAAAA,UAAU,CAAC8B,WAAD,CAAV;AACA3B,QAAAA,mBAAmB,CAACoC,SAAD,EAAYT,WAAW,CAACS,SAAD,CAAvB,CAAnB;AACH,OAbD;AAcH,KAfQ,EAeP,EAfO,CAAT;;AAiBA,UAAMjB,eAAe,GAAG,MAAM;AAC1BpB,MAAAA,OAAO,CAAC,IAAD,CAAP;AACH,KAFD;;AAIA,UAAMsC,WAAW,GAAIvD,WAAW,CAAC,MAAO;AACpCiB,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH,KAF+B,EAE9B,CAACA,OAAD,CAF8B,CAAhC;AAIC,GArCD;;AAjDc,KAiDRI,QAjDQ;;AAwFd,sBACQ;AAAS,IAAA,SAAS,EAAE,WAApB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAE,OAAhB;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEX;AAAd;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,WAAD;AAAa,QAAA,OAAO,EAAEF,OAAtB;AAA+B,QAAA,MAAM,EAAEoB;AAAvC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,UAAD;AAAY,QAAA,IAAI,EAAEZ,IAAlB;AAAwB,QAAA,WAAW,EAAEuC;AAArC;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADR;AAUH,CAlGD;;IAAMhD,G;;KAAAA,G;AAoGN,eAAeA,GAAf","sourcesContent":["import React, {useCallback, useState, useEffect} from 'react';\nimport './assets/styles/style.css';\nimport {AnswersList, Chats} from \"./components\";\nimport FormDialog from \"./components/Forms/FormDialog\";\nimport {db} from './firebase/index'\n\nconst App = () => {\n    const [answers, setAnswers] = useState([]);\n    const [chats, setChats] = useState([]);\n    const [currentId, setCurrentId] = useState(\"init\");\n    const [dataset, setDataset] = useState({});\n    const [open, setOpen] = useState(false);\n\n\n    const displayNextQuestion = (nextQuestionId, nextDataset) => {\n        addChats({\n            text:nextDatase.question,\n            type: 'question'\n        })\n\n        setAnswers(nextDataset.answers)\n        setCurrentId(nextQuestionId)\n\n        this.setState({\n            answers: this.state.dataset[nextQuestionId].answers,\n            chats: chats,\n            currentId:nextQuestionId\n        })\n    }\n\n    const selectAnswer = (selectedAnswer, nextQuestionId) => {\n        switch (true){\n\n            case (/^https:*/.test(nextQuestionId)):\n                const a = document.createElement('a');\n                a.href = nextQuestionId;\n                a.target = '_blank';\n                a.click();\n                break;\n\n            case (nextQuestionId === 'contact'):\n                handleClickOpen();\n                break;\n\n            default:\n                addChats({\n                    text: selectedAnswer,\n                    type: 'answer'\n                })\n\n                setTimeout(() => this.displayNextQuestion(nextQuestionId,dataset[nextQuestionId]), 500);\n                break;\n        }\n    }\n\n    const addChats = (chat) => {\n    setChats(prevChats => {\n        return [...prevChats, chat]\n    })\n\n    useEffect(() => {\n        const scrollArea = document.getElementById('scroll-area');\n        if (scrollArea){\n            scrollArea.scrollTop = scrollArea.scrollHeight;\n        }\n    })\n\n    useEffect( () => {\n        (async () => {\n            const initDataset = {};\n\n            await db.collection(\"questions\").get().then(snapshots => {\n                snapshots.forEach(doc => {\n                    const id = doc.id\n                    const data = doc.data()\n                    initDataset[id] = data\n                })\n            })\n\n            setDataset(initDataset)\n            displayNextQuestion(currendId, initDataset[currendId])\n        })()\n    },[])\n\n    const handleClickOpen = () => {\n        setOpen(true)\n    };\n\n    const handleClose =  useCallback(() =>  {\n        setOpen(false)\n    },[setOpen]);\n\n    }\n\n    return (\n            <section className={\"c-section\"}>\n                <div className={\"c-box\"}>\n                    <Chats chats={chats}/>\n                    <AnswersList answers={answers} select={selectAnswer}/>\n                    <FormDialog open={open} handleClose={handleClose}/>\n                </div>\n            </section>\n        );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}